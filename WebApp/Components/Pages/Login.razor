@page "/login"
@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Login</h3>

<div class="login-container">
    <form @onsubmit="PerformLogin">
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" @bind="username" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" @bind="password" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-2">@ErrorMessage</div>
        }
    </form>
</div>

@code {
    private string username;
    private string password;
    private string ErrorMessage;

    private async Task PerformLogin()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("NormalAPI");
            var loginPayload = new { username, password };

            // Log the outgoing HTTP request payload
            await JSRuntime.InvokeVoidAsync("console.log", $"Outgoing HTTP request payload: {System.Text.Json.JsonSerializer.Serialize(loginPayload)}");

            var response = await client.PostAsJsonAsync("api/auth/login", loginPayload);

            // Log the API response status code
            await JSRuntime.InvokeVoidAsync("console.log", $"API response status code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);

                // Log token storage success
                await JSRuntime.InvokeVoidAsync("console.log", "Token stored successfully.");

                // Log successful response
                await JSRuntime.InvokeVoidAsync("console.log", "Login successful");

                // Navigate to the dashboard or other page
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // Log failed HTTP request with details
                var errorDetails = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("console.error", $"Login failed: {response.ReasonPhrase}, Details: {errorDetails}");
                ErrorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            // Log error to the JavaScript console
            await JSRuntime.InvokeVoidAsync("console.error", $"Error: {ex.Message}");
            ErrorMessage = "Something went wrong. Please try again.";
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}