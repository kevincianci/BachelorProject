@page "/login"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Login</h3>
<p>Component Rendered Successfully</p>

<div class="login-container">
    <form @onsubmit="HandleSubmit">
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" @bind="username" @oninput="LogInput" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" @bind="password" @oninput="LogInput" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-2">@ErrorMessage</div>
        }
    </form>
</div>

@code {
    private string username;
    private string password;
    private string ErrorMessage;

    protected override void OnInitialized()
    {
        Console.WriteLine("Login component initialized.");
    }

    private void LogInput()
    {
        Console.WriteLine($"Username: {username}, Password: {password}");
    }

    private async Task HandleSubmit()
    {
        // Prevent the default form submission behavior
        await PerformLogin();
    }

    private async Task PerformLogin()
    {
        Console.WriteLine("PerformLogin method triggered");
        Console.WriteLine($"Username: {username}, Password: {password}");

        try
        {
            var client = HttpClientFactory.CreateClient("NormalAPI");
            var loginPayload = new { username, password };

            var requestContent = new StringContent(
                System.Text.Json.JsonSerializer.Serialize(loginPayload),
                System.Text.Encoding.UTF8,
                "application/json"
            );

            Console.WriteLine($"Sending request to: {client.BaseAddress}api/Auth/login");
            Console.WriteLine($"Request payload: {System.Text.Json.JsonSerializer.Serialize(loginPayload)}");

            var response = await client.PostAsync("api/Auth/login", requestContent);

            Console.WriteLine($"Response Status Code: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                Console.WriteLine("Login successful, token stored.");
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API call failed: {response.ReasonPhrase}, Details: {error}");
                ErrorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            ErrorMessage = "Something went wrong.";
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}